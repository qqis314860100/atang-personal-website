generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model Post {
  id         String      @id @default(uuid())
  title      String
  body       String
  author     String?     @default("")
  userId     String
  categoryId String?
  viewCount  Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  category   Category?   @relation(fields: [categoryId], references: [id])
  user       UserProfile @relation(fields: [userId], references: [id])

  @@schema("public")
}

model UserProfile {
  id               String            @id
  email            String            @unique
  bio              String?
  avatar           String?
  isAdmin          Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
  date             String?
  gender           String?
  signature        String?
  techStack        String?
  resume_content   String?
  resume_url       String?
  resume_filename  String?
  resume_size      Int?
  username         String            @unique
  categories       Category[]
  danmaku          Danmaku[]
  annotations      PDFAnnotation[]
  posts            Post[]
  videos           Video[]
  videoComments    VideoComment[]
  videoLikes       VideoLike[]
  videoPlayRecords VideoPlayRecord[]

  @@schema("public")
}

model PDFAnnotation {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  page      Int
  pdfUrl    String
  text      String
  timestamp DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  x         Float
  y         Float
  user      UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pdfUrl])
  @@index([userId])
  @@index([userId, pdfUrl])
  @@schema("public")
}

model Category {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  description String       @default("")
  updatedAt   DateTime     @default(now())
  userId      String?
  author      String?      @default("")
  user        UserProfile? @relation(fields: [userId], references: [id])
  posts       Post[]

  @@schema("public")
}

model PageView {
  id                String    @id @default(uuid())
  page              String
  user_id           String?
  session_id        String
  user_agent        String?
  ip_address        String?
  referrer          String?
  country           String?
  city              String?
  device_type       String?
  browser           String?
  os                String?
  screen_resolution String?
  language          String?
  timestamp         DateTime  @default(now())
  duration          Int?
  end_time          DateTime?
  start_time        DateTime?

  @@index([page])
  @@index([user_id])
  @@index([session_id])
  @@index([timestamp])
  @@index([device_type])
  @@schema("public")
}

model UserEvent {
  id         String   @id @default(uuid())
  event_type String
  event_name String
  page       String?
  user_id    String?
  session_id String
  properties Json?
  value      Float?
  timestamp  DateTime @default(now())

  @@index([event_type])
  @@index([user_id])
  @@index([session_id])
  @@index([timestamp])
  @@schema("public")
}

model PerformanceMetric {
  id                        String   @id @default(uuid())
  page                      String
  load_time                 Float
  dom_content_loaded        Float
  first_contentful_paint    Float?
  largest_contentful_paint  Float?
  cumulative_layout_shift   Float?
  first_input_delay         Float?
  session_id                String
  user_id                   String?
  timestamp                 DateTime @default(now())
  interaction_to_next_paint Decimal? @db.Decimal
  time_to_first_byte        Decimal? @db.Decimal
  first_paint               Decimal? @db.Decimal
  total_blocking_time       Decimal? @db.Decimal

  @@index([page])
  @@index([user_id])
  @@index([session_id])
  @@index([timestamp])
  @@schema("public")
}

model ErrorLog {
  id              String   @id @default(uuid())
  error_type      String
  error_message   String
  stack_trace     String?
  page            String?
  user_id         String?
  session_id      String
  user_agent      String?
  ip_address      String?
  severity        String   @default("medium")
  timestamp       DateTime @default(now())
  count           Int      @default(1)
  last_occurrence DateTime @default(now())
  source          String?  @default("frontend")
  trace_id        String?

  @@index([error_type])
  @@index([user_id])
  @@index([session_id])
  @@index([severity])
  @@index([timestamp])
  @@schema("public")
}

model UserSession {
  id          String    @id @default(uuid())
  user_id     String?
  started_at  DateTime
  ended_at    DateTime?
  duration    Int?
  page_count  Int       @default(0)
  event_count Int       @default(0)
  ip_address  String?
  user_agent  String?
  country     String?
  city        String?
  device_type String?
  browser     String?
  os          String?
  language    String?
  session_id  String    @unique

  @@index([user_id])
  @@index([session_id])
  @@index([started_at])
  @@index([device_type])
  @@schema("public")
}

model Danmaku {
  id          String      @id @default(uuid())
  videoId     String
  userId      String
  content     String
  timeMs      Int
  type        Int         @default(1)
  fontSize    Int         @default(25)
  color       Int         @default(16777215)
  timestampMs BigInt
  poolType    Int         @default(0)
  userHash    String?
  rowId       Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        UserProfile @relation(fields: [userId], references: [id])
  video       Video       @relation(fields: [videoId], references: [id])

  @@index([videoId, timeMs])
  @@index([timestampMs])
  @@index([userId])
  @@index([type])
  @@index([poolType])
  @@index([videoId, poolType])
  @@index([videoId, timeMs, type])
  @@index([videoId, poolType, timeMs])
  @@schema("public")
}

model DanmakuPool {
  id        String   @id @default(uuid())
  videoId   String
  poolType  Int
  name      String
  createdAt DateTime @default(now())

  @@schema("public")
}

model DanmakuStats {
  id            String   @id @default(uuid())
  videoId       String   @unique
  totalCount    Int      @default(0)
  scrollCount   Int      @default(0)
  topCount      Int      @default(0)
  bottomCount   Int      @default(0)
  reverseCount  Int      @default(0)
  advancedCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@schema("public")
}

model DanmakuTimeDistribution {
  id           String   @id @default(uuid())
  videoId      String
  timeBucket   Int
  danmakuCount Int      @default(0)
  createdAt    DateTime @default(now())

  @@unique([videoId, timeBucket])
  @@index([videoId, timeBucket])
  @@schema("public")
}

model Video {
  id           String            @id @default(uuid())
  title        String
  description  String?
  url          String
  thumbnail    String?
  duration     Int               @default(0)
  viewCount    Int               @default(0)
  likeCount    Int               @default(0)
  dislikeCount Int               @default(0)
  danmakuCount Int               @default(0)
  category     String?
  tags         String[]
  isPublic     Boolean           @default(true)
  isDeleted    Boolean           @default(false)
  userId       String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  danmaku      Danmaku[]
  user         UserProfile       @relation(fields: [userId], references: [id])
  comments     VideoComment[]
  likes        VideoLike[]
  playRecords  VideoPlayRecord[]

  @@index([userId])
  @@index([category])
  @@index([isPublic, isDeleted])
  @@index([createdAt])
  @@index([viewCount])
  @@index([likeCount])
  @@schema("public")
}

model VideoComment {
  id        String         @id @default(uuid())
  videoId   String
  userId    String
  content   String
  parentId  String?
  likeCount Int            @default(0)
  isDeleted Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  parent    VideoComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   VideoComment[] @relation("CommentReplies")
  user      UserProfile    @relation(fields: [userId], references: [id])
  video     Video          @relation(fields: [videoId], references: [id])

  @@index([videoId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@schema("public")
}

model VideoPlayRecord {
  id          String      @id @default(uuid())
  videoId     String
  userId      String
  playTime    Int         @default(0)
  progress    Float       @default(0)
  isCompleted Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        UserProfile @relation(fields: [userId], references: [id])
  video       Video       @relation(fields: [videoId], references: [id])

  @@unique([videoId, userId])
  @@index([videoId])
  @@index([userId])
  @@index([createdAt])
  @@schema("public")
}

model VideoLike {
  id        String      @id @default(uuid())
  videoId   String
  userId    String
  isLike    Boolean
  createdAt DateTime    @default(now())
  user      UserProfile @relation(fields: [userId], references: [id])
  video     Video       @relation(fields: [videoId], references: [id])

  @@unique([videoId, userId])
  @@index([videoId])
  @@index([userId])
  @@index([isLike])
  @@schema("public")
}
